/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package currencyConverter;

import java.awt.Frame;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Minh
 */
public class currencyConverter extends javax.swing.JFrame {
//    frame.setIconImage(new ImageIcon("/coin.ico").getImage());
    public final void setTitle(){
        JFrame frame = new JFrame("Ứng dụng chuyển đổi tiền");
        frame.setVisible(true);
    }
    double US_Dollar = 23307.31;
    double Euro = 26615.01;
    double British_Pound = 29905.64;
    double Japanese_Yen = 206.642;
    double South_Korean_Won = 20.8028;
    double Chinese_Yuan = 3359.36;
    double Russian_Ruble = 351.084;
    double Malaysian_Ringgit = 5550.64;
    double Bitcoin = 128998213.53;
    
    /**
     * Creates new form currencyConverter
     */
    public currencyConverter() {
//        setTitle();
        initComponents();
    }
    
//    public final void setTitle(){
//        JFrame frame = new JFrame("Ứng dụng chuyển đổi tiền");
//        frame.setSize(400, 300);
//        frame.setVisible(true);
//        JFrame.setDefaultLookAndFeelDecorated(true);
//        JFrame frame = new JFrame("Ứng dụng chuyển đổi tiền");
//        frame.setIconImage(new ImageIcon("coin.png").getImage());
//        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("coin.png")));
//        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("coin.png")));
//    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new java.awt.Button();
        txtConvert = new java.awt.TextField();
        variableCurrency = new javax.swing.JComboBox<>();
        variableCurrency1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtConvert1 = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ứng dụng chuyển đổi tiền");
        setBackground(new java.awt.Color(204, 255, 204));
        setFont(new java.awt.Font("Agency FB", 0, 36)); // NOI18N
        setForeground(new java.awt.Color(153, 255, 153));
        setSize(new java.awt.Dimension(500, 200));

        button1.setBackground(new java.awt.Color(255, 255, 153));
        button1.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        button1.setForeground(new java.awt.Color(0, 0, 0));
        button1.setLabel("Convert");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        txtConvert.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        txtConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConvertActionPerformed(evt);
            }
        });

        variableCurrency.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        variableCurrency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn...", "USD", "VND", "EUR", "JPY", "KRW", "RUB", "CNY", "GBP", "MYR", "XBT" }));
        variableCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variableCurrencyActionPerformed(evt);
            }
        });

        variableCurrency1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        variableCurrency1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn...", "USD", "VND", "EUR", "JPY", "KRW", "RUB", "CNY", "GBP", "MYR", "XBT" }));
        variableCurrency1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variableCurrency1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setFont(new java.awt.Font("Tw Cen MT", 0, 48)); // NOI18N
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 153));
        jButton2.setFont(new java.awt.Font("Tw Cen MT", 0, 48)); // NOI18N
        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtConvert1.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel2.setText("Chuyển đổi tiền tệ");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Nhập vào số tiền:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtConvert1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(variableCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(variableCurrency1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(76, 76, 76))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(104, 104, 104))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(variableCurrency, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtConvert, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtConvert1, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                            .addComponent(variableCurrency1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        txtConvert.setText(null);
        txtConvert1.setText(null);
        variableCurrency.setSelectedIndex(0);
        variableCurrency1.setSelectedIndex(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void variableCurrency1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variableCurrency1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_variableCurrency1ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        double numberCurrency = Double.parseDouble(txtConvert.getText());
        
        //ensure the number that u apply is correctly insert into system.
//        if("".equals(txtConvert.getText())){
//            JOptionPane.showMessageDialog(null, "Hãy nhập vào số tiền mà bạn muốn chuyển.");
//        }
        
        String cConvert1;
        boolean checkConvert = true, checkConvert0 = true, checkConvert1 = true, checkConvert2 = true;
        
        if(variableCurrency1.getSelectedItem().equals("VND")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (VND)", numberCurrency*Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("USD")){
            if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*Euro/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*Japanese_Yen/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*South_Korean_Won/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*Russian_Ruble/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*Chinese_Yuan/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*British_Pound/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*Malaysian_Ringgit/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (US Dollar)", numberCurrency*Bitcoin/US_Dollar);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("EUR")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*US_Dollar/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*Japanese_Yen/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*South_Korean_Won/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*Russian_Ruble/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*Chinese_Yuan/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*British_Pound/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*Malaysian_Ringgit/Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (Euro)", numberCurrency*Bitcoin/Euro);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("JPY")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*US_Dollar/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency/Japanese_Yen*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*South_Korean_Won/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*Russian_Ruble/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*Chinese_Yuan/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*British_Pound/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*Malaysian_Ringgit/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (Yen)", numberCurrency*Bitcoin/Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("KRW")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency*US_Dollar/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency/South_Korean_Won*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency/South_Korean_Won*Japanese_Yen);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency*Russian_Ruble/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency*Chinese_Yuan/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency*British_Pound/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency*Malaysian_Ringgit/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (Won)", numberCurrency*Bitcoin/South_Korean_Won);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("RUB")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*US_Dollar/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*Japanese_Yen/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*South_Korean_Won/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency/Russian_Ruble*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*Chinese_Yuan/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*British_Pound/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*Malaysian_Ringgit/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (Russian Ruble)", numberCurrency*Bitcoin/Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("CNY")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency*US_Dollar/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency*Japanese_Yen/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency*South_Korean_Won/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency/Chinese_Yuan*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency/Chinese_Yuan*Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency*British_Pound/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency*Malaysian_Ringgit/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (Yuan)", numberCurrency*Bitcoin/Chinese_Yuan);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("GBP")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency*US_Dollar/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency*Japanese_Yen/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency*South_Korean_Won/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency/British_Pound*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency*Chinese_Yuan/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency/British_Pound*Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency*Malaysian_Ringgit/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("XBT")){
                cConvert1 = String.format("%.3f (British Pound)", numberCurrency*Bitcoin/British_Pound);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("XBT")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency*US_Dollar/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency*Japanese_Yen/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency*South_Korean_Won/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency/Bitcoin*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency*Chinese_Yuan/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency*British_Pound/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency/Bitcoin*Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("MYR")){
                cConvert1 = String.format("%.3f (Bitcoin)", numberCurrency*Malaysian_Ringgit/Bitcoin);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else if(variableCurrency1.getSelectedItem().equals("MYR")){
            if(variableCurrency.getSelectedItem().equals("USD")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency*US_Dollar/Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("VND")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency/Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("JPY")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency*Japanese_Yen/Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("KRW")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency*South_Korean_Won/Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("EUR")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency/Malaysian_Ringgit*Euro);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("CNY")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency*Chinese_Yuan/Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("GBP")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency*British_Pound/Malaysian_Ringgit);
                txtConvert1.setText(cConvert1);
            }
            else if(variableCurrency.getSelectedItem().equals("RUB")){
                cConvert1 = String.format("%.3f (Ring git)", numberCurrency/Malaysian_Ringgit*Russian_Ruble);
                txtConvert1.setText(cConvert1);
            }
            else checkConvert = false;
        }
        else checkConvert1=false;
        if(variableCurrency.getSelectedItem().equals("RUB") && variableCurrency1.getSelectedItem().equals("RUB") || variableCurrency.getSelectedItem().equals("USD") && variableCurrency1.getSelectedItem().equals("USD") || variableCurrency.getSelectedItem().equals("VND") && variableCurrency1.getSelectedItem().equals("VND") || variableCurrency.getSelectedItem().equals("GBP") && variableCurrency1.getSelectedItem().equals("GBP") || variableCurrency.getSelectedItem().equals("EUR") && variableCurrency1.getSelectedItem().equals("EUR") || variableCurrency.getSelectedItem().equals("JPY") && variableCurrency1.getSelectedItem().equals("JPY") || variableCurrency.getSelectedItem().equals("KRW") && variableCurrency1.getSelectedItem().equals("KRW") || variableCurrency.getSelectedItem().equals("CNY") && variableCurrency1.getSelectedItem().equals("CNY") || variableCurrency.getSelectedItem().equals("XBT") && variableCurrency1.getSelectedItem().equals("XBT") || variableCurrency.getSelectedItem().equals("MYR") && variableCurrency1.getSelectedItem().equals("MYR")){
            JOptionPane.showMessageDialog(null, "Bạn đã chọn 2 loại tiền trùng nhau. Xin mời nhập lại!");
            checkConvert2 = false;
        }
        if(variableCurrency.getSelectedItem().equals("RUB") || variableCurrency.getSelectedItem().equals("USD") || variableCurrency.getSelectedItem().equals("VND") || variableCurrency.getSelectedItem().equals("GBP") || variableCurrency.getSelectedItem().equals("EUR") || variableCurrency.getSelectedItem().equals("JPY") || variableCurrency.getSelectedItem().equals("KRW") || variableCurrency.getSelectedItem().equals("CNY") || variableCurrency.getSelectedItem().equals("XBT") || variableCurrency.getSelectedItem().equals("MYR")){
            if(checkConvert1==false)
                checkConvert0 = false;
        }
        if(checkConvert0 == false){
            JOptionPane.showMessageDialog(null, "Hãy chọn loại tiền mà bạn muốn chuyển sang.");
        }
        if(checkConvert1 ==false && checkConvert0 == true){
            JOptionPane.showMessageDialog(null, "Hãy xác định loại tiền mà bạn muốn xác định ban đầu và loại tiền mà bạn muốn chuyển sang.");
        }
        if(checkConvert==false && checkConvert2 == true){
            //show message dialog into action:
            JOptionPane.showMessageDialog(null, "Hãy chọn loại tiền mà bạn xác định ban đầu.");
        }
    }//GEN-LAST:event_button1ActionPerformed

    private void txtConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConvertActionPerformed
        
    }//GEN-LAST:event_txtConvertActionPerformed

    private void variableCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variableCurrencyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_variableCurrencyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(currencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(currencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(currencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(currencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new currencyConverter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.TextField txtConvert;
    private java.awt.TextField txtConvert1;
    private javax.swing.JComboBox<String> variableCurrency;
    private javax.swing.JComboBox<String> variableCurrency1;
    // End of variables declaration//GEN-END:variables
}
